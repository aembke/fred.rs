version: 2.1

commands:
  modify_etc_hosts:
    steps:
      - run:
          name: Modify /etc/hosts
          command: |
            sudo tee -a /etc/hosts \<<<'127.0.0.1 example.com client.example.com node-30001.example.com node-30002.example.com node-30003.example.com node-30004.example.com node-30005.example.com node-30006.example.com'
            cat /etc/hosts
  install_openssl:
    steps:
      - run:
          name: Install OpenSSL
          command: sudo apt-get update && sudo apt-get install -y libssl-dev
  install_redis:
    steps:
      - restore_cache:
          keys:
            - redis-build-cache-{{ .Branch }}
      - run:
          name: Install redis centralized
          command: tests/scripts/install_redis_centralized.sh
      - run:
          name: Install redis cluster
          command: tests/scripts/install_redis_clustered.sh
      - save_cache:
          # FIXME come up with a better caching scope here
          key: redis-build-cache-{{ .Branch }}
          paths:
            - tests/tmp
  install_cargo_nextest:
    steps:
      - run:
          name: Install cargo-nextest
          command: tests/scripts/install_cargo_nextest.sh
  clear_git_cache:
    steps:
      - run:
          name: Clear the cargo git cache
          command: rm -rf ~/.cargo/git/* && rm -rf ~/.cargo/registry/cache/*
  setup_host:
    steps:
      - install_openssl
      - install_cargo_nextest
      - clear_git_cache
  setup_docker_compose:
    steps:
      - run:
          name: Install Docker Compose
          environment:
            COMPOSE_VERSION: '1.29.2'
          command: |
            curl -L "https://github.com/docker/compose/releases/download/${COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker
  build_docs:
    steps:
      - run:
          name: Install nightly
          command: rustup install nightly
      - run:
          name: Build documentation
          command: tests/doc.sh
  test_default_features:
    steps:
      - checkout
      - setup_host
      - install_redis
      - run:
          name: Run tests with default features
          command: tests/runners/default-features.sh
  test_all_features:
    steps:
      - checkout
      - setup_host
      - install_redis
      - run:
          name: Run tests with all features
          command: tests/runners/all-features.sh
  test_no_features:
    steps:
      - checkout
      - setup_host
      - install_redis
      - run:
          name: Run tests with no features
          command: tests/runners/no-features.sh
  test_sentinel:
    steps:
      - checkout
      - setup_docker_compose
      - run:
          name: Install and run sentinel tests
          command: docker-compose -f tests/sentinel-docker-compose.yml -f .circleci/sentinel-compose.yml run sentinel-tests
  test_tls_cluster:
    steps:
      - checkout
      - setup_host
      - modify_etc_hosts
      - run:
          name: Install cluster with TLS
          command: tests/scripts/install_tls_cluster.sh
      - run:
          name: Run cluster tests with native-tls features
          command: tests/runners/cluster-tls.sh
  test_rustls_cluster:
    steps:
      - checkout
      - setup_host
      - modify_etc_hosts
      - run:
          name: Install cluster with TLS
          command: tests/scripts/install_tls_cluster.sh
      - run:
          name: Run cluster tests with rustls features
          command: tests/runners/cluster-rustls.sh


jobs:
  test-default-7_0:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 7.0.5
    steps:
      - test_default_features
  test-no-features-7_0:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 7.0.5
    steps:
      - test_no_features
  test-all-features-7_0:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 7.0.5
    steps:
      - test_all_features
  test-cluster-tls-features-7_0:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 7.0.5
      FRED_CI_TLS: true
    steps:
      - test_tls_cluster
  test-cluster-rustls-features-7_0:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 7.0.5
      FRED_CI_TLS: true
    steps:
      - test_rustls_cluster
  test-default-6_2:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 6.2.2
    steps:
      - test_default_features
  test-no-features-6_2:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 6.2.2
    steps:
      - test_no_features
  test-all-features-6_2:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 6.2.2
    steps:
      - test_all_features
  test-sentinel-6_2:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 6.2.2
    steps:
      - test_sentinel
  test-sentinel-7_0:
    docker:
      - image: cimg/rust:1.65.0
    environment:
      REDIS_VERSION: 7.0.5
    steps:
      - test_sentinel
  test-docs:
    docker:
      - image: cimg/rust:1.65.0
    steps:
      - checkout
      - build_docs

workflows:
  version: 2
  build:
    jobs:
      # it'd be nice if we could pass parameters or something here
      - test-default-6_2
      - test-all-features-6_2
      - test-no-features-6_2
      - test-sentinel-6_2
      - test-default-7_0
      - test-all-features-7_0
      - test-no-features-7_0
      - test-sentinel-7_0
      - test-docs
      - test-cluster-tls-features-7_0
      - test-cluster-rustls-features-7_0